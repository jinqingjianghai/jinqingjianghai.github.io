<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>尽倾江海的博客</title>
  
  
  <link href="https://jinqingjianghai.github.io/atom.xml" rel="self"/>
  
  <link href="https://jinqingjianghai.github.io/"/>
  <updated>2020-11-02T03:40:39.556Z</updated>
  <id>https://jinqingjianghai.github.io/</id>
  
  <author>
    <name>jinqingjianghai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++中不能用cout输出string类型变量的解决方案</title>
    <link href="https://jinqingjianghai.github.io/2020/11/02/C-%E4%B8%AD%E4%B8%8D%E8%83%BD%E7%94%A8cout%E8%BE%93%E5%87%BAstring%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://jinqingjianghai.github.io/2020/11/02/C-%E4%B8%AD%E4%B8%8D%E8%83%BD%E7%94%A8cout%E8%BE%93%E5%87%BAstring%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2020-11-02T02:05:29.000Z</published>
    <updated>2020-11-02T03:40:39.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="no-operator-lt-lt-matches-these-operands"><a href="#no-operator-lt-lt-matches-these-operands" class="headerlink" title="no operator &lt;&lt; matches these operands"></a><strong>no operator &lt;&lt; matches these operands</strong></h1><p>初学c++时，用cout输出一个string类型字符串，出现报错： <strong>no operator &lt;&lt; matches these operands</strong> ，所以我以后用到string类型输出，先将string转为char*。但参考了广大网友的智慧，实际上cout重载了string类型，在c++中可以直接输出。   </p><a id="more"></a><h2 id="先来看CString、string和string-h这几个区别："><a href="#先来看CString、string和string-h这几个区别：" class="headerlink" title="先来看CString、string和string.h这几个区别："></a>先来看CString、string和string.h这几个区别：</h2><ul><li><p>CSting:CString是MFC或者ATL中的实现，是MFC里面封装的一个关于字符串处理的功能很强大的类,只有支持MFC的工程才可以使用。如在linux上的工程就不能用CString了，只能用标准C++中的string类了。在MFC中使用不需要自己加，但在另外的程序中需要加入#include<CString>。   </p></li><li><p>string：string类既是一个标准c++的类库，同时也是STL（Standard Template Library,标准模版库）中的类库，已经纳入C++标准之中。它和CString有本质的区别。   </p></li><li><p>string.h:C语言里面关于字符数组的函数定义的头文件，常用函数有strlen、strcmp、strcpy等等，这个头文件跟C++的string类半点关系也没有，所以 <string>并非 &lt;string.h&gt;的“升级版本”，他们是毫无关系的两个头文件。</p></li></ul><p><strong>综上，cout函数重载的是string类库中的string类型，而不是CString或string.h中的。</strong>   </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="number">2</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;CString&gt;</span></span></span><br><span class="line"> <span class="number">3</span> <span class="comment">//#include&lt;string.h&gt;</span></span><br><span class="line"> <span class="number">4</span> </span><br><span class="line"> <span class="number">5</span> <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"> <span class="number">6</span> <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span> ;</span><br><span class="line"> <span class="number">7</span> <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"> <span class="number">8</span> </span><br><span class="line"> <span class="number">9</span> main()</span><br><span class="line"><span class="number">10</span> &#123;</span><br><span class="line"><span class="number">11</span>     <span class="built_in">string</span> a;</span><br><span class="line"><span class="number">13</span>     a=<span class="string">&quot;*******&quot;</span>;</span><br><span class="line"><span class="number">15</span>     <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="number">16</span> &#125;</span><br></pre></td></tr></table></figure><p>当编译这个程序时，会出现这样的如上的error，而如果把上面的头文件改为#include<string>时，error就会消失。而在MFC中或你包含的是CString头文件，如果想用cout输出string 类型，则需要先把string类型转换char*型：   </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>* b=(<span class="keyword">char</span>*)a.c_str(); <span class="comment">//将string类型转为char*</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/mzct123/p/4876185.html">参考链接</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;no-operator-lt-lt-matches-these-operands&quot;&gt;&lt;a href=&quot;#no-operator-lt-lt-matches-these-operands&quot; class=&quot;headerlink&quot; title=&quot;no operator &amp;lt;&amp;lt; matches these operands&quot;&gt;&lt;/a&gt;&lt;strong&gt;no operator &amp;lt;&amp;lt; matches these operands&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;初学c++时，用cout输出一个string类型字符串，出现报错： &lt;strong&gt;no operator &amp;lt;&amp;lt; matches these operands&lt;/strong&gt; ，所以我以后用到string类型输出，先将string转为char*。但参考了广大网友的智慧，实际上cout重载了string类型，在c++中可以直接输出。   &lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Python输入逗号隔开的数据</title>
    <link href="https://jinqingjianghai.github.io/2020/11/01/Python%E8%BE%93%E5%85%A5%E9%80%97%E5%8F%B7%E9%9A%94%E5%BC%80%E7%9A%84%E6%95%B0%E6%8D%AE/"/>
    <id>https://jinqingjianghai.github.io/2020/11/01/Python%E8%BE%93%E5%85%A5%E9%80%97%E5%8F%B7%E9%9A%94%E5%BC%80%E7%9A%84%E6%95%B0%E6%8D%AE/</id>
    <published>2020-11-01T09:11:47.000Z</published>
    <updated>2020-11-01T14:44:34.666Z</updated>
    
    <content type="html"><![CDATA[<p>这里分享两种操作： <strong>a,b,……,z=eval(input())</strong> 和 <strong>s=input().split(“,”)</strong> ，但的第一种只适用于已知数据个数的情况下。以下是相应练习题及代码。    </p><h2 id="输入已知个数的数据"><a href="#输入已知个数的数据" class="headerlink" title="输入已知个数的数据"></a>输入已知个数的数据</h2><p><strong>a,b,……,z=eval(input())</strong></p><ul><li>eg.计算(a^b)%c    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a,b,c=<span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="comment">#x=pow(a,b)%c可能会超时</span></span><br><span class="line">x=<span class="built_in">pow</span>(a,b,c)</span><br><span class="line">print(x)  </span><br></pre></td></tr></table></figure></li></ul><a id="more"></a>    <hr><ul><li>eg.判断某年某月有几天（输入两个逗号隔开的数据）  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a,b=<span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">c=<span class="number">30</span>  </span><br><span class="line"><span class="keyword">if</span> b==<span class="number">2</span>:  </span><br><span class="line">    <span class="keyword">if</span> ((a%<span class="number">4</span>==<span class="number">0</span>)<span class="keyword">and</span>(a%<span class="number">100</span>!=<span class="number">0</span>)) <span class="keyword">or</span> (a%<span class="number">400</span>==<span class="number">0</span>):  </span><br><span class="line">        c=<span class="number">29</span>  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        c=<span class="number">28</span>  </span><br><span class="line"><span class="comment">#&quot;if (b==1)or(b==3)or(b==5)or(b==7)or(b==8)or  (b==10)or(b==12): &quot; 太过繁琐，改进为：</span></span><br><span class="line">d=(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>)</span><br><span class="line"><span class="keyword">if</span> b <span class="keyword">in</span> d:</span><br><span class="line">    c=<span class="number">31</span>  </span><br><span class="line">print(<span class="string">&quot;&#123;&#125;年&#123;&#125;月有&#123;&#125;天&quot;</span>.<span class="built_in">format</span>(a,b,c))  </span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="输入未知个数的数据"><a href="#输入未知个数的数据" class="headerlink" title="输入未知个数的数据"></a>输入未知个数的数据</h2><p><strong>s=input().split(“,”)</strong> 返回一个列表    </p><ul><li>eg.输入若干个数字，以逗号隔开，输出最大值    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str1=<span class="built_in">input</span>()</span><br><span class="line">s=str1.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="built_in">max</span>=<span class="built_in">int</span>(s[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(s)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(s[i])&gt;<span class="built_in">max</span>:</span><br><span class="line">        <span class="built_in">max</span>=<span class="built_in">int</span>(s[i])</span><br><span class="line">print(<span class="string">&quot;最大值为：&quot;</span>+<span class="built_in">str</span>(<span class="built_in">max</span>))</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这里分享两种操作： &lt;strong&gt;a,b,……,z=eval(input())&lt;/strong&gt; 和 &lt;strong&gt;s=input().split(“,”)&lt;/strong&gt; ，但的第一种只适用于已知数据个数的情况下。以下是相应练习题及代码。    &lt;/p&gt;
&lt;h2 id=&quot;输入已知个数的数据&quot;&gt;&lt;a href=&quot;#输入已知个数的数据&quot; class=&quot;headerlink&quot; title=&quot;输入已知个数的数据&quot;&gt;&lt;/a&gt;输入已知个数的数据&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;a,b,……,z=eval(input())&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;eg.计算(a^b)%c    &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a,b,c=&lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;input&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#x=pow(a,b)%c可能会超时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x=&lt;span class=&quot;built_in&quot;&gt;pow&lt;/span&gt;(a,b,c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(x)  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
